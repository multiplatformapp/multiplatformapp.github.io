I"&<h2 id="install-android-studio-and-xcode">Install Android Studio and XCode</h2>
<p>First Android Studio and Xcode need to be installed.</p>

<h2 id="setup-enviroments-variable">Setup enviroments variable</h2>

<h3 id="mac">Mac</h3>
<p>Add these to your <code class="language-plaintext highlighter-rouge">.zprofile</code> (or <code class="language-plaintext highlighter-rouge">.bashprofile</code> if you use bash).</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ANDROID_HOME</span><span class="o">=</span>~/Library/Android/sdk
<span class="nb">export </span><span class="nv">ANDROID_SDK_ROOT</span><span class="o">=</span>~/Library/Android/sdk
<span class="nb">export </span><span class="nv">ANDROID_AVD_HOME</span><span class="o">=</span>~/.android/avd
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ANDROID_HOME</span>/emulator
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ANDROID_HOME</span>/tools
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ANDROID_HOME</span>/tools/bin
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ANDROID_HOME</span>/platform-tools

<span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ANDROID_HOME</span>/cmdline-tools/tools/bin
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ANDROID_HOME</span>/platform-tools
</code></pre></div></div>
<p>Note above <code class="language-plaintext highlighter-rouge">JAVA_HOME</code> is my local machine default path, might be different minor version for you, but as long as it is <code class="language-plaintext highlighter-rouge">jkd.1.8.xxx</code> then it is ok.</p>

<h3 id="windows">Windows</h3>
<p>[WIP], make sure those paths are added in <code class="language-plaintext highlighter-rouge">Enviroment Variables</code></p>

<h2 id="install-appium">Install Appium</h2>

<h3 id="install-appium-1">Install Appium</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> appium
</code></pre></div></div>
<h3 id="install-appium-doctor">Install Appium doctor</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> appium-doctor
</code></pre></div></div>

<h2 id="create-appium-dotnet-client-project">Create Appium Dotnet Client Project</h2>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new classlib <span class="nt">-o</span> AppiumDotnetClient
</code></pre></div></div>

<h3 id="add-nuget-packages">Add nuget packages</h3>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet add package Appium.WebDriver <span class="nt">--version</span> 4.3.1
</code></pre></div></div>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet add package NUnit <span class="nt">--version</span> 3.13.2
</code></pre></div></div>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet add package NUnit3TestAdapter <span class="nt">--version</span> 4.0.0
</code></pre></div></div>

<p>Alternative paste these in <code class="language-plaintext highlighter-rouge">.csproj</code> file, then run <code class="language-plaintext highlighter-rouge">dotnet restore</code></p>
<pre><code class="language-C#">  &lt;ItemGroup&gt;
    &lt;PackageReference Include="Appium.WebDriver" Version="4.3.1" /&gt;
    &lt;PackageReference Include="NUnit" Version="3.13.2" /&gt;
    &lt;PackageReference Include="NUnit3TestAdapter" Version="4.0.0" /&gt;
  &lt;/ItemGroup&gt;
</code></pre>

<h2 id="create-first-android-test">Create first android test:</h2>
<p>Create <code class="language-plaintext highlighter-rouge">FirstAndroidTest.cs</code></p>
<pre><code class="language-C#">using System;
using System.IO;
using NUnit.Framework;
using OpenQA.Selenium.Appium;
using OpenQA.Selenium.Appium.Android;
using OpenQA.Selenium.Appium.Enums;

namespace AppiumDotnetClient
{
	public class FirstAndroidTest
	{
		private AppiumDriver&lt;AndroidElement&gt; _driver;

		[SetUp]
		public void Setup()
		{
			var currentTestDirectory = Directory.GetParent(System.AppDomain.CurrentDomain.BaseDirectory)
											.Parent.Parent.Parent.FullName;

			var driverOptions = new AppiumOptions();
			driverOptions.AddAdditionalCapability(MobileCapabilityType.PlatformName, "Android"); 
			driverOptions.AddAdditionalCapability(MobileCapabilityType.AutomationName, "UIAutomator2"); //(1)
			driverOptions.AddAdditionalCapability(MobileCapabilityType.DeviceName, "Pixel 3a Droid10");
			driverOptions.AddAdditionalCapability("avd", "Pixel_3a_Droid10"); //(2)
			driverOptions.AddAdditionalCapability(MobileCapabilityType.App, $"{currentTestDirectory}/apps/DemoApp.apk"); //(3)

			driverOptions.AddAdditionalCapability("appWaitActivity", "*.MainActivity"); //(4)
			_driver = new AndroidDriver&lt;AndroidElement&gt;(new Uri("http://localhost:4723/wd/hub"), driverOptions); //(5)
		}

		[TearDown]
		public void TearDown()
		{
			_driver?.Quit();
		}

		[Test]
		public void LaunchApp()
		{
			Assert.Pass();
		}
	}
}
</code></pre>

<blockquote>
  <p><strong>(1)</strong> Appium supports both UIAutomator2 and Espresso for Android UI Automation test, weâ€™ll be using UIAutomator2 this time.</p>
</blockquote>

<blockquote>
  <p><strong>(2)</strong> <code class="language-plaintext highlighter-rouge">avd</code> capability allows android device to be launched when test running, choose which ever emulator you have available on your machine.</p>
</blockquote>

<blockquote>
  <p><strong>(3)</strong> This is the path to your app, in this sample the app was downloaded from <a href="https://github.com/webdriverio/native-demo-app/releases">here</a></p>
</blockquote>

<blockquote>
  <p><strong>(4)</strong> This allows to wait untill the <code class="language-plaintext highlighter-rouge">MainActivity</code> started before running our test.</p>
</blockquote>

<blockquote>
  <p><strong>(5)</strong> This is the defaut address of appium server, default port is <code class="language-plaintext highlighter-rouge">4723</code>, different ports can be used for parallel run.</p>
</blockquote>

<h2 id="run-test">Run test</h2>
<h3 id="start-appium-server">Start Appium Server</h3>
<p>Open terminal and run</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>appium
</code></pre></div></div>
<p>Open another terminal and run</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet <span class="nb">test</span>
</code></pre></div></div>

<p>Test should now run successfully and we should see this in our Appium server output</p>
<pre><code class="language-Node">[HTTP] &lt;-- POST /wd/hub/session 200 5696 ms - 1059
</code></pre>

<p>The test app launch and our test run.</p>

<h2 id="create-ios-first-test">Create iOS first test</h2>
<p>Create <code class="language-plaintext highlighter-rouge">FirstIOSTest.cs</code></p>
<pre><code class="language-C#">using System;
using System.IO;
using NUnit.Framework;
using OpenQA.Selenium.Appium;
using OpenQA.Selenium.Appium.Enums;
using OpenQA.Selenium.Appium.iOS;

namespace AppiumDotnetClient
{
	public class FirstIOSTest
	{
		private AppiumDriver&lt;IOSElement&gt; _driver;

		[SetUp]
		public void Setup()
		{
			var currentTestDirectory = Directory.GetParent(System.AppDomain.CurrentDomain.BaseDirectory)
											.Parent.Parent.Parent.FullName;

			var driverOptions = new AppiumOptions();
			driverOptions.AddAdditionalCapability(MobileCapabilityType.PlatformName, "iOS");
			driverOptions.AddAdditionalCapability(MobileCapabilityType.AutomationName, "XCUITest"); //(1) 
			driverOptions.AddAdditionalCapability(MobileCapabilityType.DeviceName, "iPhone 12"); // (2) 
			driverOptions.AddAdditionalCapability(MobileCapabilityType.PlatformVersion, "14.5"); // (2) 
			driverOptions.AddAdditionalCapability(MobileCapabilityType.App, $"{currentTestDirectory}/apps/DemoApp.app.zip");
			//(3)
			_driver = new IOSDriver&lt;IOSElement&gt;(new Uri("http://localhost:4723/wd/hub"), driverOptions);
		}

		[TearDown]
		public void TearDown()
		{
			_driver?.Quit();
		}

		[Test]
		public void LaunchApp()
		{
			Assert.Pass();
		}
	}
}

</code></pre>

<blockquote>
  <p><strong>(1)</strong> XCUITest is used for testing iOS</p>
</blockquote>

<blockquote>
  <p><strong>(2)</strong> this can be check via Xcode to see what simulator &amp; OS version you have available, (run <code class="language-plaintext highlighter-rouge">xcrun simctl list</code>)</p>
</blockquote>

<blockquote>
  <p><strong>(3)</strong>  No capability is required to start an ios simulator because appium will do it for us</p>
</blockquote>

<p>Repeat above step to run test, test should now run successfully.</p>
:ET